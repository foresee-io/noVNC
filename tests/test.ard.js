const expect = chai.expect;

import RFB from '../core/rfb.js';

import FakeWebSocket from './fake.websocket.js';

const receiveData = new Uint8Array([
    0x00, 0x02, 0x00, 0x80, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xc9, 0x0f, 0xda, 0xa2,
    0x21, 0x68, 0xc2, 0x34, 0xc4, 0xc6, 0x62, 0x8b,
    0x80, 0xdc, 0x1c, 0xd1, 0x29, 0x02, 0x4e, 0x08,
    0x8a, 0x67, 0xcc, 0x74, 0x02, 0x0b, 0xbe, 0xa6,
    0x3b, 0x13, 0x9b, 0x22, 0x51, 0x4a, 0x08, 0x79,
    0x8e, 0x34, 0x04, 0xdd, 0xef, 0x95, 0x19, 0xb3,
    0xcd, 0x3a, 0x43, 0x1b, 0x30, 0x2b, 0x0a, 0x6d,
    0xf2, 0x5f, 0x14, 0x37, 0x4f, 0xe1, 0x35, 0x6d,
    0x6d, 0x51, 0xc2, 0x45, 0xe4, 0x85, 0xb5, 0x76,
    0x62, 0x5e, 0x7e, 0xc6, 0xf4, 0x4c, 0x42, 0xe9,
    0xa6, 0x37, 0xed, 0x6b, 0x0b, 0xff, 0x5c, 0xb6,
    0xf4, 0x06, 0xb7, 0xed, 0xee, 0x38, 0x6b, 0xfb,
    0x5a, 0x89, 0x9f, 0xa5, 0xae, 0x9f, 0x24, 0x11,
    0x7c, 0x4b, 0x1f, 0xe6, 0x49, 0x28, 0x66, 0x51,
    0xec, 0xe6, 0x53, 0x81, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0x2e, 0xa9, 0xdc, 0x27,
    0x9a, 0xa2, 0xb8, 0x7a, 0x9b, 0xd6, 0x35, 0x20,
    0xfd, 0x3b, 0x83, 0x6f, 0xdc, 0x05, 0xe8, 0xfe,
    0xd8, 0xaf, 0x2d, 0x19, 0xbb, 0x66, 0xb9, 0xfd,
    0xf4, 0x0f, 0x43, 0xe1, 0xe7, 0xbd, 0x11, 0xe3,
    0x18, 0xcf, 0x96, 0x0a, 0x54, 0x68, 0x0e, 0x69,
    0x39, 0xf2, 0x26, 0xd1, 0xaf, 0x76, 0x11, 0x99,
    0xb1, 0x9c, 0xd8, 0x36, 0x4a, 0x46, 0xcf, 0x23,
    0xce, 0xd5, 0x19, 0x26, 0xe7, 0xc8, 0xfe, 0xb9,
    0x97, 0xc4, 0xbf, 0x83, 0x13, 0xe6, 0xa3, 0xd1,
    0x5a, 0x4f, 0x9a, 0x91, 0xc8, 0xc1, 0x19, 0x2e,
    0x1d, 0x9c, 0x72, 0x31, 0x78, 0xae, 0x18, 0x17,
    0x13, 0x32, 0xe9, 0xf6, 0x8f, 0x72, 0x96, 0x27,
    0x35, 0x46, 0xa7, 0x6d, 0x0d, 0x82, 0x24, 0x5a,
    0x80, 0xcb, 0xb0, 0x3c, 0x82, 0x9f, 0xb2, 0x77,
    0x3e, 0x8a, 0xea, 0x5e, 0xcf, 0xbe, 0x6c, 0x66,
    0x06, 0xca, 0x15, 0x82,
]);

const sendData = new Uint8Array([
    0x00, 0x55, 0xd1, 0x5e, 0x65, 0x69, 0x25, 0x25,
    0xc2, 0xb8, 0x0b, 0x68, 0x9c, 0x1b, 0x2c, 0xd9,
    0xa0, 0xe8, 0xb1, 0x26, 0x8c, 0x7b, 0x10, 0x4e,
    0xf6, 0x39, 0xbc, 0xc2, 0x17, 0x58, 0x92, 0xf0,
    0x5c, 0x87, 0x63, 0x62, 0x5f, 0xea, 0x29, 0x3e,
    0x12, 0xb2, 0x3e, 0xb4, 0x9b, 0x8a, 0x95, 0x5d,
    0xac, 0x3b, 0xa3, 0x9f, 0x2f, 0xde, 0x45, 0xea,
    0x45, 0xb8, 0x41, 0x0b, 0x9e, 0xfd, 0xad, 0x66,
    0x04, 0x34, 0xca, 0xa2, 0xf4, 0xd2, 0xc3, 0x33,
    0x5c, 0xad, 0x63, 0x8b, 0xae, 0x9a, 0x4f, 0xea,
    0xf4, 0x1f, 0x19, 0x1b, 0xb8, 0x86, 0x9c, 0x4f,
    0x39, 0x9c, 0xc3, 0x67, 0xe3, 0x02, 0x9b, 0x2a,
    0x55, 0x7c, 0x8a, 0xb0, 0xc8, 0xf7, 0x92, 0x8b,
    0x9d, 0xc7, 0xb6, 0xb1, 0x90, 0x7b, 0xb7, 0x4c,
    0xcc, 0x73, 0x4c, 0x84, 0x0b, 0xdf, 0x91, 0xb6,
    0xc5, 0xb3, 0xeb, 0x81, 0xe7, 0x49, 0x2f, 0xe3,
    0xf6, 0x90, 0x56, 0xe7, 0xa2, 0xa5, 0x88, 0x04,
    0x5f, 0x7b, 0x1a, 0x08, 0xcc, 0xb8, 0xa8, 0xec,
    0x62, 0xfd, 0x1e, 0xc2, 0x07, 0x7c, 0x97, 0xfd,
    0x77, 0x94, 0x13, 0x80, 0x11, 0xc9, 0xef, 0x4d,
    0x01, 0x14, 0x7d, 0x0d, 0x08, 0x1c, 0x6e, 0x14,
    0x5b, 0x4d, 0x77, 0x4e, 0xc4, 0xba, 0xb9, 0x44,
    0x36, 0xd6, 0xcc, 0x3c, 0xdf, 0xfd, 0xc6, 0xf2,
    0x12, 0x0b, 0xdd, 0x3e, 0x57, 0x1b, 0x03, 0x97,
    0xe2, 0x17, 0x80, 0x46, 0xaf, 0xa8, 0xad, 0x0e,
    0x55, 0x88, 0x38, 0x78, 0xa1, 0xce, 0x8c, 0x1d,
    0x2b, 0xa9, 0x8f, 0xbd, 0x9f, 0x95, 0x42, 0x92,
    0xf7, 0xcb, 0xdf, 0x94, 0xd6, 0xdf, 0x1b, 0x9a,
    0x15, 0x5b, 0x8f, 0xe3, 0x5f, 0x2d, 0x54, 0x7e,
    0xf9, 0x95, 0x84, 0xee, 0x0e, 0x16, 0x73, 0x81,
    0xbe, 0xb5, 0xf0, 0xe2, 0x6f, 0x65, 0xb0, 0xe9,
    0x29, 0x7d, 0xba, 0x8d, 0x78, 0x11, 0xb1, 0x54,
]);

describe('ARD handshake', function () {
    let sock;
    let rfb;
    let sentData;

    before(() => {
        FakeWebSocket.replace();
        sinon.stub(window.crypto, "getRandomValues")
            .onFirstCall().callsFake((arr) => {
                arr.set(new Uint8Array([
                    0x40, 0x26, 0x17, 0x7c, 0xca, 0x81, 0xdb, 0xe5,
                    0x51, 0x46, 0xdd, 0x82, 0x5a, 0xcf, 0xaa, 0xfe,
                    0xe6, 0x78, 0x5b, 0x6b, 0x63, 0xe4, 0x14, 0x9c,
                    0xa8, 0x41, 0xec, 0x64, 0x78, 0x04, 0x47, 0xc2,
                    0xc3, 0x76, 0x2d, 0x86, 0xe4, 0x7a, 0xd6, 0x45,
                    0x9d, 0x45, 0x3e, 0x81, 0x8f, 0x04, 0x77, 0x92,
                    0x82, 0xd6, 0x1d, 0xb4, 0x21, 0x24, 0xf3, 0x13,
                    0x84, 0x5b, 0xc5, 0x00, 0xa0, 0x9f, 0xd0, 0x8d,
                    0xd7, 0x20, 0xe0, 0xe3, 0x6c, 0xec, 0xab, 0x91,
                    0x88, 0x09, 0x5b, 0xd5, 0xa7, 0x6e, 0xbf, 0xdb,
                    0x93, 0xd9, 0x89, 0x0c, 0xa1, 0xe1, 0x48, 0xc8,
                    0xf5, 0x50, 0x76, 0xa1, 0x47, 0x02, 0x0e, 0x97,
                    0x92, 0x84, 0x25, 0x6a, 0x61, 0x03, 0x8e, 0x08,
                    0x90, 0xe4, 0x7c, 0x8e, 0x17, 0x59, 0xc7, 0xcc,
                    0xf6, 0x86, 0x26, 0xe3, 0xfc, 0xce, 0x17, 0x80,
                    0x25, 0xb4, 0x97, 0x4a, 0x75, 0x52, 0xfa, 0xcc,
                ]));
            }).onSecondCall().callsFake((arr) => {
                arr.set(new Uint8Array([
                    0xbb, 0x65, 0xa8, 0x06, 0xe9, 0xbf, 0xa5, 0xd9,
                    0x6d, 0x45, 0x39, 0xf2, 0xf9, 0xb0, 0xb1, 0x76,
                    0x8a, 0x7b, 0xff, 0xd9, 0xf2, 0x70, 0x6c, 0xa3,
                    0xdf, 0xbf, 0x49, 0x89, 0x18, 0xe0, 0x5f, 0xc4,
                    0x47, 0x9e, 0x0c, 0xd0, 0xa1, 0x70, 0x5e, 0xe2,
                    0xf3, 0xe0, 0x31, 0xe3, 0x94, 0x04, 0xd6, 0x6e,
                    0x15, 0xe2, 0xba, 0xe3, 0xe4, 0xa5, 0xfd, 0x52,
                    0xb3, 0x1d, 0xf0, 0x91, 0x0b, 0xe9, 0x8b, 0x1b,
                    0x6c, 0xa6, 0x49, 0x82, 0x51, 0xc3, 0x69, 0x8c,
                    0x60, 0x77, 0xd2, 0x25, 0x1b, 0x1d, 0x38, 0x03,
                    0x06, 0x69, 0xdc, 0xa2, 0xc7, 0xa4, 0x9f, 0x21,
                    0xa3, 0xcd, 0x3e, 0x70, 0xb2, 0xca, 0x54, 0x74,
                    0x63, 0x50, 0xe1, 0x55, 0x5c, 0xb2, 0x5a, 0x16,
                    0x80, 0x48, 0x7b, 0xf5, 0x06, 0x57, 0x26, 0x70,
                    0x65, 0x83, 0xf3, 0xdd, 0xa6, 0xd0, 0x72, 0xc1,
                    0xd8, 0x8e, 0x96, 0x3b, 0xdb, 0x44, 0xce, 0x34,
                ]));
            });
    });
    after(() => {
        FakeWebSocket.restore();
        window.crypto.getRandomValues.restore();
    });

    it('should fire the credentialsrequired event', function (done) {
        sentData = new Uint8Array();
        rfb = new RFB(document.createElement('div'), "ws://example.com");
        sock = rfb._sock;
        sock.send = (data) => {
            let res = new Uint8Array(sentData.length + data.length);
            res.set(sentData);
            res.set(data, sentData.length);
            sentData = res;
        };
        rfb._rfbInitState = "Security";
        rfb._rfbVersion = 3.8;
        sock._websocket._receiveData(new Uint8Array([1, 30]));
        rfb.addEventListener("credentialsrequired", (e) => {
            expect(e.detail.types).to.eql(["username", "password"]);
            done();
        });
        sock._websocket._receiveData(receiveData);
    });

    it('should match sendData after sending credentials', function (done) {
        rfb.addEventListener("securityresult", (event) => {
            expect(sentData.slice(1)).to.eql(sendData);
            done();
        });
        rfb.sendCredentials({ "username": "test", "password": "123456" });
    });
});
